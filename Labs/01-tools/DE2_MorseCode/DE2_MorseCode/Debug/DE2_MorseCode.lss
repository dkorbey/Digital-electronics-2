
DE2_MorseCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d4  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000692  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000334  00000000  00000000  000011a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cc  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f8  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <shortDot>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	39 e6       	ldi	r19, 0x69	; 105
  84:	88 e1       	ldi	r24, 0x18	; 24
  86:	21 50       	subi	r18, 0x01	; 1
  88:	30 40       	sbci	r19, 0x00	; 0
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <shortDot+0x6>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <shortDot+0x10>
  90:	00 00       	nop
	// Start delay ms
	_delay_ms(SHORT_DELAY);
	
	// Invert LED in Data Register
	// PORTB = PORTB xor 0010 0000
	PORTB = PORTB ^ (1<<LED_GREEN);
  92:	95 b1       	in	r25, 0x05	; 5
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	98 27       	eor	r25, r24
  98:	95 b9       	out	0x05, r25	; 5
  9a:	9f ef       	ldi	r25, 0xFF	; 255
  9c:	29 e6       	ldi	r18, 0x69	; 105
  9e:	38 e1       	ldi	r19, 0x18	; 24
  a0:	91 50       	subi	r25, 0x01	; 1
  a2:	20 40       	sbci	r18, 0x00	; 0
  a4:	30 40       	sbci	r19, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <shortDot+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <shortDot+0x2a>
  aa:	00 00       	nop
	
	_delay_ms(SHORT_DELAY);
	
	PORTB = PORTB ^ (1<<LED_GREEN);
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	89 27       	eor	r24, r25
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	08 95       	ret

000000b4 <longDot>:
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	39 e6       	ldi	r19, 0x69	; 105
  b8:	88 e1       	ldi	r24, 0x18	; 24
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	30 40       	sbci	r19, 0x00	; 0
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <longDot+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <longDot+0x10>
  c4:	00 00       	nop
	// Start delay ms
	_delay_ms(SHORT_DELAY);
	
	// Invert LED in Data Register
	// PORTB = PORTB xor 0010 0000
	PORTB = PORTB ^ (1<<LED_GREEN);
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	80 e2       	ldi	r24, 0x20	; 32
  ca:	98 27       	eor	r25, r24
  cc:	95 b9       	out	0x05, r25	; 5
  ce:	9f ef       	ldi	r25, 0xFF	; 255
  d0:	23 ed       	ldi	r18, 0xD3	; 211
  d2:	30 e3       	ldi	r19, 0x30	; 48
  d4:	91 50       	subi	r25, 0x01	; 1
  d6:	20 40       	sbci	r18, 0x00	; 0
  d8:	30 40       	sbci	r19, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <longDot+0x20>
  dc:	00 c0       	rjmp	.+0      	; 0xde <longDot+0x2a>
  de:	00 00       	nop
	
	// Start delay ms
	_delay_ms(LONG_DELAY);
	
	PORTB = PORTB ^ (1<<LED_GREEN);
  e0:	95 b1       	in	r25, 0x05	; 5
  e2:	89 27       	eor	r24, r25
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	08 95       	ret

000000e8 <main>:
int main(void)
{
	
	// Set pin as output in Data Direction Register
	// DDRB = DDRB or 0010 0000
	DDRB = DDRB | (1<<LED_GREEN);
  e8:	25 9a       	sbi	0x04, 5	; 4
	
	// Set pin LOW in Data Register (LED off)
	// PORTB = PORTB and 1101 1111
	PORTB = PORTB & ~(1<<LED_GREEN);
  ea:	2d 98       	cbi	0x05, 5	; 5
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	83 ed       	ldi	r24, 0xD3	; 211
  f0:	90 e3       	ldi	r25, 0x30	; 48
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0xa>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x14>
  fc:	00 00       	nop
		
		// Start delay ms
		_delay_ms(LONG_DELAY);
		
		//D in morse code
		longDot();
  fe:	0e 94 5a 00 	call	0xb4	; 0xb4 <longDot>
		shortDot();
 102:	0e 94 40 00 	call	0x80	; 0x80 <shortDot>
		shortDot();
 106:	0e 94 40 00 	call	0x80	; 0x80 <shortDot>
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	89 e6       	ldi	r24, 0x69	; 105
 10e:	98 e1       	ldi	r25, 0x18	; 24
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x28>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x32>
 11a:	00 00       	nop
		
		//Interval delay
		_delay_ms(SHORT_DELAY);
		
		//E
		shortDot();
 11c:	0e 94 40 00 	call	0x80	; 0x80 <shortDot>
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	89 e6       	ldi	r24, 0x69	; 105
 124:	98 e1       	ldi	r25, 0x18	; 24
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x3e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x48>
 130:	00 00       	nop
		
		//Interval Delay
		_delay_ms(SHORT_DELAY);
		
		//2
		shortDot();
 132:	0e 94 40 00 	call	0x80	; 0x80 <shortDot>
		shortDot();
 136:	0e 94 40 00 	call	0x80	; 0x80 <shortDot>
		longDot();
 13a:	0e 94 5a 00 	call	0xb4	; 0xb4 <longDot>
		longDot();
 13e:	0e 94 5a 00 	call	0xb4	; 0xb4 <longDot>
		longDot();
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <longDot>
 146:	d2 cf       	rjmp	.-92     	; 0xec <main+0x4>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
