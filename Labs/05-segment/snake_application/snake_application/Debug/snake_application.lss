
snake_application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002d8  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000105d  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a5  00000000  00000000  000014c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000683  00000000  00000000  00001d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  000023ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e3  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000529  00000000  00000000  000029bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002ee4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8e:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIO_config_output+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIO_config_output+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  ae:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num); // Clear bit (and not)
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_write_low+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_write_low+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <GPIO_write_high>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num); // Set bit (or)
  c8:	fc 01       	movw	r30, r24
  ca:	40 81       	ld	r20, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_write_high+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_write_high+0xa>
  da:	24 2b       	or	r18, r20
  dc:	20 83       	st	Z, r18
  de:	08 95       	ret

000000e0 <main>:
/* Variables ---------------------------------------------------------*/

int main(void)
{
	// Configure SSD signals
	SEG_init();
  e0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SEG_init>
	
    /* Replace with your application code */
    while (1) 
    {
		SEG_update_shift_regs(0b11101111, 0b00010000, 0); // Position 0, Led D
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	60 e1       	ldi	r22, 0x10	; 16
  e8:	8f ee       	ldi	r24, 0xEF	; 239
  ea:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <SEG_update_shift_regs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	84 e3       	ldi	r24, 0x34	; 52
  f2:	9c e0       	ldi	r25, 0x0C	; 12
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x14>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x1e>
  fe:	00 00       	nop
		_delay_ms(250);
		SEG_update_shift_regs(0b11011111, 0b00010000, 0); // Position 0, Led C
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	60 e1       	ldi	r22, 0x10	; 16
 104:	8f ed       	ldi	r24, 0xDF	; 223
 106:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <SEG_update_shift_regs>
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	84 e3       	ldi	r24, 0x34	; 52
 10e:	9c e0       	ldi	r25, 0x0C	; 12
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x30>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x3a>
 11a:	00 00       	nop
		_delay_ms(250);
		SEG_update_shift_regs(0b10111111, 0b00010000, 0); // Position 0, Led B
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	60 e1       	ldi	r22, 0x10	; 16
 120:	8f eb       	ldi	r24, 0xBF	; 191
 122:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <SEG_update_shift_regs>
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	84 e3       	ldi	r24, 0x34	; 52
 12a:	9c e0       	ldi	r25, 0x0C	; 12
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x4c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x56>
 136:	00 00       	nop
		_delay_ms(250);
		SEG_update_shift_regs(0b01111111, 0b00010000, 0); // Position 0, Led A
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	60 e1       	ldi	r22, 0x10	; 16
 13c:	8f e7       	ldi	r24, 0x7F	; 127
 13e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <SEG_update_shift_regs>
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	84 e3       	ldi	r24, 0x34	; 52
 146:	9c e0       	ldi	r25, 0x0C	; 12
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x68>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x72>
 152:	00 00       	nop
		_delay_ms(250);
		SEG_update_shift_regs(0b01111111, 0b00100000, 0); // Position 1, Led A
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	60 e2       	ldi	r22, 0x20	; 32
 158:	8f e7       	ldi	r24, 0x7F	; 127
 15a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <SEG_update_shift_regs>
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	84 e3       	ldi	r24, 0x34	; 52
 162:	9c e0       	ldi	r25, 0x0C	; 12
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x84>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x8e>
 16e:	00 00       	nop
		_delay_ms(250);
		SEG_update_shift_regs(0b11111011, 0b00100000, 0); // Position 1, Led F
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	60 e2       	ldi	r22, 0x20	; 32
 174:	8b ef       	ldi	r24, 0xFB	; 251
 176:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <SEG_update_shift_regs>
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	84 e3       	ldi	r24, 0x34	; 52
 17e:	9c e0       	ldi	r25, 0x0C	; 12
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0xa0>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0xaa>
 18a:	00 00       	nop
		_delay_ms(250);
		SEG_update_shift_regs(0b11110111, 0b00100000, 0); // Position 1, Led E
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	60 e2       	ldi	r22, 0x20	; 32
 190:	87 ef       	ldi	r24, 0xF7	; 247
 192:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <SEG_update_shift_regs>
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	84 e3       	ldi	r24, 0x34	; 52
 19a:	9c e0       	ldi	r25, 0x0C	; 12
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0xbc>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0xc6>
 1a6:	00 00       	nop
		_delay_ms(250);
		SEG_update_shift_regs(0b11101111, 0b00100000, 0); // Position 1, Led D
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	60 e2       	ldi	r22, 0x20	; 32
 1ac:	8f ee       	ldi	r24, 0xEF	; 239
 1ae:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <SEG_update_shift_regs>
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	84 e3       	ldi	r24, 0x34	; 52
 1b6:	9c e0       	ldi	r25, 0x0C	; 12
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0xd8>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0xe2>
 1c2:	00 00       	nop
 1c4:	8f cf       	rjmp	.-226    	; 0xe4 <main+0x4>

000001c6 <SEG_init>:

/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 1c6:	64 e0       	ldi	r22, 0x04	; 4
 1c8:	8a e2       	ldi	r24, 0x2A	; 42
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 1d0:	67 e0       	ldi	r22, 0x07	; 7
 1d2:	8a e2       	ldi	r24, 0x2A	; 42
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	84 e2       	ldi	r24, 0x24	; 36
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
 1e4:	08 95       	ret

000001e6 <SEG_update_shift_regs>:
}

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position, uint8_t input_type)
{
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	d8 2f       	mov	r29, r24
 1ee:	c6 2f       	mov	r28, r22
    uint8_t bit_number;
	
	if(input_type == 1) {
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	51 f4       	brne	.+20     	; 0x208 <SEG_update_shift_regs+0x22>
		// Getting segment and position values from the arrays
		segments = segment_value[segments];     // 0, 1, ..., 9
 1f4:	e8 2f       	mov	r30, r24
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	ec 5f       	subi	r30, 0xFC	; 252
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
 1fc:	d0 81       	ld	r29, Z
		position = segment_position[position];  // 0, 1, 2, 3
 1fe:	e6 2f       	mov	r30, r22
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	e0 50       	subi	r30, 0x00	; 0
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	c0 81       	ld	r28, Z
	}
	
    // Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD, SEGMENT_LATCH);  // LATCH
 208:	64 e0       	ldi	r22, 0x04	; 4
 20a:	8b e2       	ldi	r24, 0x2B	; 43
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_CLK);    // CLK
 212:	67 e0       	ldi	r22, 0x07	; 7
 214:	8b e2       	ldi	r24, 0x2B	; 43
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	GPIO_write_low(&PORTB, SEGMENT_DATA);	// DATA
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	85 e2       	ldi	r24, 0x25	; 37
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	85 e0       	ldi	r24, 0x05	; 5
 228:	8a 95       	dec	r24
 22a:	f1 f7       	brne	.-4      	; 0x228 <SEG_update_shift_regs+0x42>
 22c:	00 00       	nop
 22e:	18 e0       	ldi	r17, 0x08	; 8
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "segments")
		if((segments % 2) == 0) // LSB is 0
 230:	d0 fd       	sbrc	r29, 0
 232:	06 c0       	rjmp	.+12     	; 0x240 <SEG_update_shift_regs+0x5a>
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	85 e2       	ldi	r24, 0x25	; 37
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 23e:	05 c0       	rjmp	.+10     	; 0x24a <SEG_update_shift_regs+0x64>
		else
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	85 e2       	ldi	r24, 0x25	; 37
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 24a:	85 e0       	ldi	r24, 0x05	; 5
 24c:	8a 95       	dec	r24
 24e:	f1 f7       	brne	.-4      	; 0x24c <SEG_update_shift_regs+0x66>
 250:	00 00       	nop

        // Wait 1 us
		_delay_us(1);
        // Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 252:	67 e0       	ldi	r22, 0x07	; 7
 254:	8b e2       	ldi	r24, 0x2B	; 43
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	8a 95       	dec	r24
 260:	f1 f7       	brne	.-4      	; 0x25e <SEG_update_shift_regs+0x78>
 262:	00 00       	nop
        // Wait 1 us
		_delay_us(1);
        // Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 264:	67 e0       	ldi	r22, 0x07	; 7
 266:	8b e2       	ldi	r24, 0x2B	; 43
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
		
        // Shift "segments"
        segments = segments >> 1;
 26e:	d6 95       	lsr	r29
 270:	11 50       	subi	r17, 0x01	; 1
    // Wait 1 us
	_delay_us(1);
	
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 272:	f1 f6       	brne	.-68     	; 0x230 <SEG_update_shift_regs+0x4a>
 274:	d8 e0       	ldi	r29, 0x08	; 8
    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "position")
		if((position % 2) == 0) // LSB is 0
 276:	c0 fd       	sbrc	r28, 0
 278:	06 c0       	rjmp	.+12     	; 0x286 <SEG_update_shift_regs+0xa0>
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	85 e2       	ldi	r24, 0x25	; 37
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 284:	05 c0       	rjmp	.+10     	; 0x290 <SEG_update_shift_regs+0xaa>
		else
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	85 e2       	ldi	r24, 0x25	; 37
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 290:	85 e0       	ldi	r24, 0x05	; 5
 292:	8a 95       	dec	r24
 294:	f1 f7       	brne	.-4      	; 0x292 <SEG_update_shift_regs+0xac>
 296:	00 00       	nop

		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 298:	67 e0       	ldi	r22, 0x07	; 7
 29a:	8b e2       	ldi	r24, 0x2B	; 43
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 2a2:	85 e0       	ldi	r24, 0x05	; 5
 2a4:	8a 95       	dec	r24
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <SEG_update_shift_regs+0xbe>
 2a8:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 2aa:	67 e0       	ldi	r22, 0x07	; 7
 2ac:	8b e2       	ldi	r24, 0x2B	; 43
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>

        // Shift "position"
        position = position >> 1;
 2b4:	c6 95       	lsr	r28
 2b6:	d1 50       	subi	r29, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2b8:	f1 f6       	brne	.-68     	; 0x276 <SEG_update_shift_regs+0x90>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
	GPIO_write_high(&PORTD, SEGMENT_LATCH);
 2ba:	64 e0       	ldi	r22, 0x04	; 4
 2bc:	8b e2       	ldi	r24, 0x2B	; 43
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 2c4:	85 e0       	ldi	r24, 0x05	; 5
 2c6:	8a 95       	dec	r24
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <SEG_update_shift_regs+0xe0>
 2ca:	00 00       	nop
	
    // Wait 1 us
	_delay_us(1);

}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
