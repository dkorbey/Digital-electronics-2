
timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002aa  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  00000342  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a75  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000708  00000000  00000000  00000ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d4  00000000  00000000  000015a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042a  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015d  00000000  00000000  00001eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002007  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  9e:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_nopull(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
	*reg_name++;                    // Change pointer to Data Register
	*reg_name = *reg_name & ~(1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_pullup>:
}

/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_pullup+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_pullup+0xa>
  d0:	92 2f       	mov	r25, r18
  d2:	90 95       	com	r25
  d4:	89 23       	and	r24, r25
  d6:	80 83       	st	Z, r24
    *reg_name++;                    // Change pointer to Data Register
  d8:	80 81       	ld	r24, Z
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	28 2b       	or	r18, r24
  de:	21 83       	std	Z+1, r18	; 0x01
  e0:	08 95       	ret

000000e2 <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  e2:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num); // Clear bit (and not)
  e4:	90 81       	ld	r25, Z
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <GPIO_write_low+0xe>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <GPIO_write_low+0xa>
  f4:	20 95       	com	r18
  f6:	29 23       	and	r18, r25
  f8:	20 83       	st	Z, r18
  fa:	08 95       	ret

000000fc <GPIO_write_high>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num); // Set bit (or)
  fc:	fc 01       	movw	r30, r24
  fe:	40 81       	ld	r20, Z
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <GPIO_write_high+0xe>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <GPIO_write_high+0xa>
 10e:	24 2b       	or	r18, r20
 110:	20 83       	st	Z, r18
 112:	08 95       	ret

00000114 <GPIO_toggle>:
}

/*--------------------------------------------------------------------*/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num); // Toggle bit (xor)
 114:	fc 01       	movw	r30, r24
 116:	40 81       	ld	r20, Z
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <GPIO_toggle+0xe>
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <GPIO_toggle+0xa>
 126:	24 27       	eor	r18, r20
 128:	20 83       	st	Z, r18
 12a:	08 95       	ret

0000012c <GPIO_read>:
	/* uint8_t result;
	
	result = *reg_name>>pin_num;
	return result; */
	
	if(bit_is_clear(*reg_name, pin_num)) {
 12c:	fc 01       	movw	r30, r24
 12e:	80 81       	ld	r24, Z
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <GPIO_read+0xc>
 134:	95 95       	asr	r25
 136:	87 95       	ror	r24
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <GPIO_read+0x8>
		return 0;
	}else{
		return 1;
	}
}
 13c:	81 70       	andi	r24, 0x01	; 1
 13e:	08 95       	ret

00000140 <main>:

int main(void)
{	
		
    /* Configuration of three LEDs */
    GPIO_config_output(&DDRB, leds[0]);
 140:	c0 e0       	ldi	r28, 0x00	; 0
 142:	d1 e0       	ldi	r29, 0x01	; 1
 144:	68 81       	ld	r22, Y
 146:	84 e2       	ldi	r24, 0x24	; 36
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTB, leds[0]);
 14e:	68 81       	ld	r22, Y
 150:	85 e2       	ldi	r24, 0x25	; 37
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
    GPIO_config_output(&DDRB, leds[1]);
 158:	69 81       	ldd	r22, Y+1	; 0x01
 15a:	84 e2       	ldi	r24, 0x24	; 36
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_high(&PORTB, leds[1]);
 162:	69 81       	ldd	r22, Y+1	; 0x01
 164:	85 e2       	ldi	r24, 0x25	; 37
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	
	GPIO_config_output(&DDRB, leds[2]);
 16c:	6a 81       	ldd	r22, Y+2	; 0x02
 16e:	84 e2       	ldi	r24, 0x24	; 36
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_high(&PORTB, leds[2]);
 176:	6a 81       	ldd	r22, Y+2	; 0x02
 178:	85 e2       	ldi	r24, 0x25	; 37
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	
	GPIO_config_output(&DDRB, leds[3]);
 180:	6b 81       	ldd	r22, Y+3	; 0x03
 182:	84 e2       	ldi	r24, 0x24	; 36
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_high(&PORTB, leds[3]);
 18a:	6b 81       	ldd	r22, Y+3	; 0x03
 18c:	85 e2       	ldi	r24, 0x25	; 37
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	
	
	/*Setting up the push button*/
	GPIO_config_input_pullup(&DDRD, BTN);
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	8a e2       	ldi	r24, 0x2A	; 42
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>

    // Enables interrupts by setting the global interrupt mask
    sei();
 19e:	78 94       	sei
		}
		else
		{
			 /* Configuration of 16-bit Timer/Counter1
			 * Set prescaler and enable overflow interrupt */
			 TIM1_overflow_262ms();
 1a0:	c1 e8       	ldi	r28, 0x81	; 129
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
		     TIM1_overflow_interrupt_enable();
 1a4:	0f e6       	ldi	r16, 0x6F	; 111
 1a6:	10 e0       	ldi	r17, 0x00	; 0
    sei();
	
    // Infinite loop
    while (1)
    {
        if(GPIO_read(&PIND, BTN)) 
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	89 e2       	ldi	r24, 0x29	; 41
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 96 00 	call	0x12c	; 0x12c <GPIO_read>
 1b2:	88 23       	and	r24, r24
 1b4:	59 f0       	breq	.+22     	; 0x1cc <main+0x8c>
		{
			/* Configuration of 16-bit Timer/Counter1
			 * Set prescaler and enable overflow interrupt */
			 TIM1_overflow_1s();
 1b6:	88 81       	ld	r24, Y
 1b8:	8c 7f       	andi	r24, 0xFC	; 252
 1ba:	88 83       	st	Y, r24
 1bc:	88 81       	ld	r24, Y
 1be:	84 60       	ori	r24, 0x04	; 4
 1c0:	88 83       	st	Y, r24
		     TIM1_overflow_interrupt_enable();
 1c2:	f8 01       	movw	r30, r16
 1c4:	80 81       	ld	r24, Z
 1c6:	81 60       	ori	r24, 0x01	; 1
 1c8:	80 83       	st	Z, r24
 1ca:	ee cf       	rjmp	.-36     	; 0x1a8 <main+0x68>
		}
		else
		{
			 /* Configuration of 16-bit Timer/Counter1
			 * Set prescaler and enable overflow interrupt */
			 TIM1_overflow_262ms();
 1cc:	88 81       	ld	r24, Y
 1ce:	8b 7f       	andi	r24, 0xFB	; 251
 1d0:	88 83       	st	Y, r24
 1d2:	88 81       	ld	r24, Y
 1d4:	83 60       	ori	r24, 0x03	; 3
 1d6:	88 83       	st	Y, r24
		     TIM1_overflow_interrupt_enable();
 1d8:	f8 01       	movw	r30, r16
 1da:	80 81       	ld	r24, Z
 1dc:	81 60       	ori	r24, 0x01	; 1
 1de:	80 83       	st	Z, r24
 1e0:	e3 cf       	rjmp	.-58     	; 0x1a8 <main+0x68>

000001e2 <__vector_13>:
    return 0;
}

/* Interrupt service routines ----------------------------------------*/
ISR(TIMER1_OVF_vect)
{	
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
	//Toggling off the previous led
	GPIO_toggle(&PORTB, leds[led_count]);
 204:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <led_count>
 208:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <led_count+0x1>
 20c:	e0 50       	subi	r30, 0x00	; 0
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	60 81       	ld	r22, Z
 212:	85 e2       	ldi	r24, 0x25	; 37
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
	
	//Changing the direction
	if(led_count == 3) {
 21a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <led_count>
 21e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <led_count+0x1>
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	91 05       	cpc	r25, r1
 226:	39 f4       	brne	.+14     	; 0x236 <__vector_13+0x54>
		back = 1;
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
 230:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
 234:	17 c0       	rjmp	.+46     	; 0x264 <__vector_13+0x82>
	}
	if(led_count == 0) {
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	29 f4       	brne	.+10     	; 0x244 <__vector_13+0x62>
		back = 0;
 23a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 23e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 242:	07 c0       	rjmp	.+14     	; 0x252 <__vector_13+0x70>
	}
		
	if(back == 0){
 244:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 248:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 24c:	21 15       	cp	r18, r1
 24e:	31 05       	cpc	r19, r1
 250:	31 f4       	brne	.+12     	; 0x25e <__vector_13+0x7c>
		led_count = led_count + 1;
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <led_count+0x1>
 258:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <led_count>
 25c:	08 c0       	rjmp	.+16     	; 0x26e <__vector_13+0x8c>
	}
	else if(back == 1){
 25e:	21 30       	cpi	r18, 0x01	; 1
 260:	31 05       	cpc	r19, r1
 262:	29 f4       	brne	.+10     	; 0x26e <__vector_13+0x8c>
		led_count = led_count - 1;
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <led_count+0x1>
 26a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <led_count>
	}
		
	//Toggling on the new led
	GPIO_toggle(&PORTB, leds[led_count]);
 26e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <led_count>
 272:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <led_count+0x1>
 276:	e0 50       	subi	r30, 0x00	; 0
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	60 81       	ld	r22, Z
 27c:	85 e2       	ldi	r24, 0x25	; 37
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <_exit>:
 2a6:	f8 94       	cli

000002a8 <__stop_program>:
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <__stop_program>
