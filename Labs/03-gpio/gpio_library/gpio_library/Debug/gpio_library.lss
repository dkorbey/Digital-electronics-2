
gpio_library.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a46  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000742  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c3  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000450  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f8  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 80 00 	call	0x100	; 0x100 <main>
  78:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num); // Set bit (or)
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_config_input_pullup>:
  98:	fc 01       	movw	r30, r24
  9a:	80 81       	ld	r24, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_config_input_pullup+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_config_input_pullup+0xa>
  aa:	92 2f       	mov	r25, r18
  ac:	90 95       	com	r25
  ae:	89 23       	and	r24, r25
  b0:	80 83       	st	Z, r24
  b2:	80 81       	ld	r24, Z
  b4:	81 81       	ldd	r24, Z+1	; 0x01
  b6:	28 2b       	or	r18, r24
  b8:	21 83       	std	Z+1, r18	; 0x01
  ba:	08 95       	ret

000000bc <GPIO_write_low>:
  bc:	fc 01       	movw	r30, r24
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <GPIO_write_low+0xe>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <GPIO_write_low+0xa>
  ce:	20 95       	com	r18
  d0:	29 23       	and	r18, r25
  d2:	20 83       	st	Z, r18
  d4:	08 95       	ret

000000d6 <GPIO_toggle>:
}

/*--------------------------------------------------------------------*/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num); // Toggle bit (xor)
  d6:	fc 01       	movw	r30, r24
  d8:	40 81       	ld	r20, Z
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <GPIO_toggle+0xe>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <GPIO_toggle+0xa>
  e8:	24 27       	eor	r18, r20
  ea:	20 83       	st	Z, r18
  ec:	08 95       	ret

000000ee <GPIO_read>:
/*--------------------------------------------------------------------*/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	uint8_t result;
	
	result = *reg_name>>pin_num;
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
	return result;
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <GPIO_read+0xc>
  f6:	95 95       	asr	r25
  f8:	87 95       	ror	r24
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <GPIO_read+0x8>
}
  fe:	08 95       	ret

00000100 <main>:
 */

int main(void)
{
    /* GREEN LED */
    GPIO_config_output(&DDRB, LED_GREEN);
 100:	65 e0       	ldi	r22, 0x05	; 5
 102:	84 e2       	ldi	r24, 0x24	; 36
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_GREEN); //LED off, because active-high
 10a:	65 e0       	ldi	r22, 0x05	; 5
 10c:	85 e2       	ldi	r24, 0x25	; 37
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 5e 00 	call	0xbc	; 0xbc <GPIO_write_low>

    /* second LED */
    GPIO_config_output(&DDRC, LED_RED);
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	87 e2       	ldi	r24, 0x27	; 39
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_write_low(&PORTC, LED_RED); //LED off, because active-low
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	88 e2       	ldi	r24, 0x28	; 40
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 5e 00 	call	0xbc	; 0xbc <GPIO_write_low>
	
    /* push button */
    GPIO_config_input_pullup(&DDRD, BTN);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	8a e2       	ldi	r24, 0x2A	; 42
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_config_input_pullup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	89 e6       	ldi	r24, 0x69	; 105
 136:	98 e1       	ldi	r25, 0x18	; 24
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x38>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x42>
 142:	00 00       	nop
    while(1)
    {
        // Pause several milliseconds
        _delay_ms(BLINK_DELAY);

        if(!(GPIO_read(&PIND, BTN)))
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	89 e2       	ldi	r24, 0x29	; 41
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 77 00 	call	0xee	; 0xee <GPIO_read>
 14e:	81 11       	cpse	r24, r1
 150:	f0 cf       	rjmp	.-32     	; 0x132 <main+0x32>
		{
		GPIO_toggle(&PORTB, LED_GREEN);
 152:	65 e0       	ldi	r22, 0x05	; 5
 154:	85 e2       	ldi	r24, 0x25	; 37
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
		
		GPIO_toggle(&PORTC, LED_RED);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	88 e2       	ldi	r24, 0x28	; 40
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
 166:	e5 cf       	rjmp	.-54     	; 0x132 <main+0x32>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
