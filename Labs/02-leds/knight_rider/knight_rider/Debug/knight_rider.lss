
knight_rider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074f  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000681  00000000  00000000  00000923  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000311  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c7  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000016b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  78:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <clear>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	89 e6       	ldi	r24, 0x69	; 105
  84:	98 e1       	ldi	r25, 0x18	; 24
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <clear+0x6>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <clear+0x10>
  90:	00 00       	nop
	
	// Pause several milliseconds
	_delay_ms(BLINK_DELAY);
	
	//Making all outputs low for the LEDs
	PORTB = PORTB & ~(1<<LED1);
  92:	29 98       	cbi	0x05, 1	; 5
	PORTB = PORTB & ~(1<<LED2);
  94:	2a 98       	cbi	0x05, 2	; 5
	PORTB = PORTB & ~(1<<LED3);
  96:	2b 98       	cbi	0x05, 3	; 5
	PORTB = PORTB & ~(1<<LED4);
  98:	2c 98       	cbi	0x05, 4	; 5
	PORTB = PORTB & ~(1<<LED5);
  9a:	2d 98       	cbi	0x05, 5	; 5
  9c:	08 95       	ret

0000009e <main>:
 * when a push button is pressed.
 */
int main(void)
{
    /* Setting the DDRx as output for LEDs */
    DDRB = DDRB | (1<<LED1);
  9e:	21 9a       	sbi	0x04, 1	; 4
    DDRB = DDRB | (1<<LED2);
  a0:	22 9a       	sbi	0x04, 2	; 4
    DDRB = DDRB | (1<<LED3);
  a2:	23 9a       	sbi	0x04, 3	; 4
    DDRB = DDRB | (1<<LED4);
  a4:	24 9a       	sbi	0x04, 4	; 4
    DDRB = DDRB | (1<<LED5);
  a6:	25 9a       	sbi	0x04, 5	; 4
		
	/* PUSH BUTTON*/
	DDRD = DDRD & ~(1<<BTN); //input
  a8:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<BTN); //enable internal pull up
  aa:	58 9a       	sbi	0x0b, 0	; 11
	
    // Infinite loop
    while (1)
    {
       
			clear();
  ac:	0e 94 40 00 	call	0x80	; 0x80 <clear>
			loop_until_bit_is_clear(PIND, BTN);
  b0:	48 99       	sbic	0x09, 0	; 9
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <main+0x12>
			PORTB = PORTB | (1<<LED1);
  b4:	29 9a       	sbi	0x05, 1	; 5
			loop_until_bit_is_clear(PIND, BTN);
  b6:	48 99       	sbic	0x09, 0	; 9
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <main+0x18>
			clear();
  ba:	0e 94 40 00 	call	0x80	; 0x80 <clear>
			PORTB = PORTB | (1<<LED2);
  be:	2a 9a       	sbi	0x05, 2	; 5
			loop_until_bit_is_clear(PIND, BTN);
  c0:	48 99       	sbic	0x09, 0	; 9
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <main+0x22>
			clear();
  c4:	0e 94 40 00 	call	0x80	; 0x80 <clear>
			PORTB = PORTB | (1<<LED3);
  c8:	2b 9a       	sbi	0x05, 3	; 5
			loop_until_bit_is_clear(PIND, BTN);
  ca:	48 99       	sbic	0x09, 0	; 9
  cc:	fe cf       	rjmp	.-4      	; 0xca <main+0x2c>
			clear();
  ce:	0e 94 40 00 	call	0x80	; 0x80 <clear>
			PORTB = PORTB | (1<<LED4);
  d2:	2c 9a       	sbi	0x05, 4	; 5
			loop_until_bit_is_clear(PIND, BTN);
  d4:	48 99       	sbic	0x09, 0	; 9
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <main+0x36>
			clear();
  d8:	0e 94 40 00 	call	0x80	; 0x80 <clear>
			PORTB = PORTB | (1<<LED5);	
  dc:	2d 9a       	sbi	0x05, 5	; 5
			loop_until_bit_is_clear(PIND, BTN);
  de:	48 99       	sbic	0x09, 0	; 9
  e0:	fe cf       	rjmp	.-4      	; 0xde <main+0x40>
  e2:	e4 cf       	rjmp	.-56     	; 0xac <main+0xe>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
